name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  hotcache:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache .NET packages
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: dotnet restore

  lint-test:
    runs-on: ubuntu-latest
    needs: hotcache
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Use cached .NET packages
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Run linter
        run: dotnet format --check

      - name: Run tests
        run: dotnet test --no-restore --verbosity normal

  build-push-Image:
    runs-on: ubuntu-latest
    needs: hotcache
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use cached .NET packages
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build the project
        run: dotnet build --configuration Release --no-restore
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Install jq
        run: sudo apt-get install -y jq
      - name: Extract version
        id: get_version
        run: |
          VERSION=$(jq -r '.AppSettings.Version' appsettings.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/sergioanastacio/cmcio-backend:latest
            ghcr.io/sergioanastacio/cmcio-backend:${{ env.VERSION }}
            ghcr.io/sergioanastacio/cmcio-backend:${{ env.VERSION }}-${{ github.sha }}

  UpdateCDmanifest:
    runs-on: ubuntu-latest
    needs: Build-Push-Image
    steps:
      - name: Checkout other repository
        uses: actions/checkout@v4
        with:
          repository: ${{github.repository_owner}}/cmcio-argocd
          token: ${{ secrets.PAT }}
          path: other-repo

      - name: Modify deployment file
        run: |
          cd other-repo
          sed -i "s|image: ghcr.io/sergioanastacio/cmcio-backend:.*|image: ghcr.io/sergioanastacio/cmcio-backend:${{ needs.Build-Push-Image.outputs.version }}|g" dev/backend/cmcio-backend-deployment.yaml

      - name: Commit and push changes
        run: |
          cd other-repo
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add dev/frontend/cmcio-frontend-deployment.yaml
          git commit -m "Modificación automática desde workflow"
          git push origin main